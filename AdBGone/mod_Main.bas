Attribute VB_Name = "mod_Main"
''''''''''''''''''''''''''''''''''''''''''''''''''
'' AdBGone -- Advertisement blocking software   ''
''                                              ''
'' Author: (C) 2003-2004 Emanuel Miller         ''
'' Contact: 3miller@sbcglobal.net               ''
''          www.ccorpsoft.com                   ''
''                                              ''
'' Purpose: to rid myself of anoying ads        ''
''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''
'' mod_Cache:   IE Cache routines               ''
'' mod_Config:  AdBGone configuration routines  ''
'' mod_Main:    Root of all things              ''
'' mod_Menu:    Menu routines                   ''
'' mod_Net:     Socket routines                 ''
'' mod_Tray:    System tray routines            ''
'' SubCls:      OwnerDrawn menu routines        ''
''''''''''''''''''''''''''''''''''''''''''''''''''


Public Sub Main()

    If App.PrevInstance Then End
    
    '' Where life begins
    
    '' Set the default locations
    hosts_file = App.Path & "\abg_hosts.dat"
    backup_file = App.Path & "\abg_backup.dat"
    adv_block_file = App.Path & "\abg_img.dat"
    html_file = App.Path & "\abg_html.dat"
    
    '' Reset the blocked advertiement count
    advertisement_count = 0
    popop_count = 0
    
    '' Load the windows locations
    set_Windows_config

    '' Attempt to load configuration
    '' If it fails, attempt to create the configuration
    '' If that fails, check to see if the running OS is
    '' Windows XP, if it is notify the user that purhaps
    '' He doesnt have administrator capabilities, if not
    '' just let him know that we couldnt create configuration and end
    If load_Config = 1 Then
        If create_Config = 1 Then
            If LCase(windows_version.OS_Name) = "windows xp" Or LCase(windows_version.OS_Name) = "windows 2000" Then
                MsgBox "Unable to create configuration, purhaps you need Administrator capabilities?", vbCritical, build_title
            Else
                MsgBox "There was a problem creating the configuration.", vbCritical, build_title
            End If
            end_Main
        End If
    End If
    
    '' See if the configuration was made by an older version of adbgone
    '' If it is, let the user know, then reset the version to the current
    '' so this message isnt displayed more than once
    If Val(reg_version) < Val(build_version) And Not Len(reg_version) = 0 Then
        MsgBox build_title & " has detected that the current configuration is for version " & reg_version & " and " & Chr(13) & Chr(10) & _
        "was not generated by the currently running version (" & build_version & ")." & Chr(13) & Chr(10) & Chr(10) & Chr(10) & _
        "If you experience problems, select 'Restore' from the menu and reload " & build_title & ".", vbInformation, build_title
        With registry_entry
            .hkey = HKEY_CURRENT_USER
            .KeyRoot = "Software"
            .Subkey = build_title
            .SetRegistryValue "Version", build_version, REG_SZ
        End With
    End If
    
    '' Check to see if a backup file has been made
    '' If not attempt to back it up, if that fails
    '' let the user know and disable the restore feature
    If Not verify_Backupfile Then
        If backup_hosts = 1 Then
            MsgBox "Could not make a backup of your hosts file." & Chr(13) & Chr(10) & _
            "You can continue to use " & build_title & ", but you" & Chr(13) & Chr(10) & _
            "will not be able to restore any changed settings/files.", vbInformation, build_title
            frmMenu.menuRestore.Enabled = False
        End If
    End If
    
    '' Disable the icon menu
    menu_cancel_flag = True

    If Not reg_checkReg And Not reg_registered Then
        reg_count = Val(reg_unregGetCount)
        reg_registered = False
    Else
        reg_registered = True
        reg_count = 0
    End If
    
    If reg_count > 300 Then GoTo reg_ender
    
    If Not reg_registered And Not first_run Then
        With frmReg
            .Show
            Call SetTopMostWindow(frmReg.hwnd, True)
            .cmdClose.Enabled = False
            Dim temp_counter As Integer
            temp_counter = 5
            While temp_counter > 0
                DoEvents
                .cmdClose.Caption = "Wait (" & temp_counter & ")"
                timeout 1
                temp_counter = Val(temp_counter) - 1
            Wend
            .cmdClose.Caption = "Try It"
            .cmdClose.Enabled = True
        End With
        While menu_cancel_flag
            DoEvents
        Wend
    End If
    
    '' Create the icon in the system tray
    tray frmMenu, build_title
    
    '' If protection was enabled in the last sesssion
    '' Restart it, if not ensure that it is disabled

 
    If protect Then
        enable_Protection
    End If
 
    '' If this is the initial run, show a splash screen
    If first_run Then frmMain.Show
                
    Load frmMenu
    '' Enable owner drawn menus
    SubClass frmMenu.hwnd
    '' Add the icons
    add_menu_icons frmMenu

    menu_cancel_flag = False
    
    Exit Sub
    
reg_ender:
    reg_showReg
    
End Sub

Public Function disable_LoadAtBoot()
        
    '' Remove the entry from the windows startup registry folder
    '' so that we do not load at boot anymore
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        .KeyRoot = "Software\Microsoft\Windows\CurrentVersion\Run"
        .Subkey = ""
        
        .DeleteValue build_title
    End With
    
End Function

Public Function enable_LoadAtBoot()
    
    '' Add a entry in the windows startup registry folder
    '' so that we start loading at boot time
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        .KeyRoot = "Software\Microsoft\Windows\CurrentVersion\Run"
        .Subkey = ""
        
        .SetRegistryValue build_title, App.Path & "\" & App.EXEName & ".exe", REG_SZ
    End With

End Function

Public Function disable_Protection()

    '' Update the tooltip in the system tray icon letting the user
    '' know that protection has been disabled
    If use_server = 1 Then
        tray_update frmMenu, build_title & " (disabled)" & vbCrLf & "Ads blocked: " & advertisement_count & vbCrLf & "Popups blocked: " & popup_count
    Else
        tray_update frmMenu, build_title & " (disabled)" & vbCrLf & "Ads blocked: counter disabled" & vbCrLf & "Popups blocked: " & popup_count
    End If
    
    '' Stop the advertisement replacement host
    stop_adv_host
    
    '' Set the value of Enabled to False so we can know
    '' the next time adbgone is loaded
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        .KeyRoot = "Software"
        .Subkey = build_title
        .SetRegistryValue "Enabled", "False", REG_SZ
    End With
    
    '' Update the icon menu with protection disabled checked
    With frmMenu
        .menuProton.Checked = False
        .menuProtoff.Checked = True
    End With
    
    '' Disable blocking of popups
    block_popups = False
    frmMenu.IEEvents1.Enabled = False
    
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        
        .KeyRoot = "Software"
        .Subkey = build_title
        
        .SetRegistryValue "Pop_Count", popup_count, REG_SZ
    End With

    With registry_entry
        .hkey = HKEY_CURRENT_USER
        
        .KeyRoot = "Software"
        .Subkey = build_title
        
        .SetRegistryValue "Ad_Count", advertisement_count, REG_SZ
    End With
    
    reg_unregSaveCount reg_count, False
   
    '' If theres an error, skip it
    On Error Resume Next
    '' Close the file
    Close #1
   
    '' Restore the old windows hosts file
    Open windows_hosts_file For Output As #1
    
        Print #1, "# " & build_title & Chr(13) & Chr(10) & localhost & " localhost"
       
    Close #1
  
    Exit Function
    
End Function

Public Function enable_Protection()

    '' Update the tooltip in the system tray icon letting the user
    '' know that protection has been enabled
    If use_server = 1 Then
        tray_update frmMenu, build_title & " (enabled)" & vbCrLf & "Ads blocked: " & advertisement_count & vbCrLf & "PopUps blocked: " & popup_count
    Else
        tray_update frmMenu, build_title & " (enabled)" & vbCrLf & "Ads blocked: counter disabled" & vbCrLf & "PopUps blocked: " & popup_count
    End If
        
    '' Start the advertisement replacement host
    start_adv_host

    '' If the hosts file cannot be found, disable protection and exit
    If Len(Dir(hosts_file)) = 0 Then
        disable_Protection
        Exit Function
    End If
    
    '' Enable icon menu
    menu_cancel_flag = True
    
    '' Show a status dialog
    frmStatus.Caption = build_title & " -- Status"
    frmStatus.Show

    '' Set the value of Enabled to true so we know next time
    '' we load
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        .KeyRoot = "Software"
        .Subkey = build_title
        .SetRegistryValue "Enabled", "True", REG_SZ
    End With
    
    '' Make sure protection is checked in the icon menu
    With frmMenu
        .menuProton.Checked = True
        .menuProtoff.Checked = False
    End With
    
    '' Check to see if the user wants us to clear
    '' IE's cache before starting protection
    '' If not skip to the start_protection goto tag
    If Not clear_ie_cache Then GoTo start_protection
    
    With frmStatus
        '' Update the status
        .lblStatus.Caption = "Loading IE Cache..."
        
        '' Temporary variables
        Dim cache_size, cache_counter As Integer
        Dim cache_bytes As Long
        
        cache_size = 1
        cache_bytes = 0
        
        '' On an error, skip it
        On Error Resume Next
        mod_Cache.FindFirstCacheEntry
        
        '' A timeout, can be removed, goes so fast sometimes
        '' you dont notice the dialog
        timeout 0.1
        '' Go through each cache entry and count
        '' This will be used so we can display a progress bar
        While mod_Cache.FindNextCacheEntry
            If Not Len(mod_Cache.CachedEntryFileName) = 0 Then
                cache_bytes = cache_bytes + (FileLen(mod_Cache.CachedEntryFileName) / 1024)
            End If
            cache_size = cache_size + 1
        Wend

        '' Release it
        mod_Cache.ReleaseCache
        
        '' Update status
        .lblStatus.Caption = "Deleting IE Cache... (" & Format(cache_bytes / 1024, "0.00") & " MB)"

        '' Start the process over but this time actually delete
        mod_Cache.FindFirstCacheEntry
        cache_counter = 1
        While mod_Cache.FindNextCacheEntry
            '' Calculate a percentage we can use in the progress bar
            If (cache_counter / cache_size * 100) > (.pbStatus.Value + 2) Then
                .pbStatus.Value = cache_counter / cache_size * 100
                .pbStatus.Refresh
                .Refresh
            End If
            mod_Cache.DeleteCacheEntry mod_Cache.CachedEntrySourceURL
            cache_counter = cache_counter + 1
        Wend
        
        '' Release
        mod_Cache.ReleaseCache

    End With
    
start_protection:
        
    With frmStatus
        '' Update status

        .lblStatus.Caption = "Starting protection..."
        
        '' Temporary variable
        Dim temp_data As String
        '' Skip the errors
        On Error Resume Next
        '' Make sure both files are already closed
        Close #3
        Close #4

        '' Open the hosts_file for reading
        Open hosts_file For Input As #3

        '' And open the windows' host file for writing
        Open windows_hosts_file For Output As #4

            '' Read from our host file
            '' Dumping everything into the windows' host file
            '' Until we hit the end
            While Not EOF(3)
            
                DoEvents
                Line Input #3, temp_data
                Print #4, temp_data
            Wend

            '' Add the default ip for localhost
            Print #4, Chr(13) & Chr(10) & localhost & " localhost"

        '' Close em
        Close #3
        Close #4
        
    End With
    
    '' Check to see if we should block popups
    If block_popups_config Then

        '' Update status
        frmStatus.lblStatus.Caption = "Starting popup protection..."
        '' Set the popup flag to true so we will block popups

        
        '' Enable the Internet Explorer events class

    
        frmMenu.IEEvents1.Enabled = True
        block_popups = True
       
        '' Wait a little bit
        timeout 0.5
       
    Else
  
        
        frmMenu.IEEvents1.Enabled = False
        block_popups = False
       
    End If
    
    '' Clear variables
    temp_data = ""
    cache_counter = 0
    cache_size = 0
    cache_bytes = 0
    
    '' Unload the status dialog
    Unload frmStatus
    '' Enable icon menu
    menu_cancel_flag = False
    
    Exit Function
    
End Function
Public Sub end_Main(Optional alt_end As Integer)

    '' Skip errors
    On Error Resume Next

    '' Disable blocking of popups
    block_popups = False
    frmMenu.IEEvents1.Enabled = False
    
    With registry_entry
        .hkey = HKEY_CURRENT_USER
        
        .KeyRoot = "Software"
        .Subkey = build_title
        
        .SetRegistryValue "Pop_Count", popup_count, REG_SZ
    End With

    With registry_entry
        .hkey = HKEY_CURRENT_USER
        
        .KeyRoot = "Software"
        .Subkey = build_title
        
        .SetRegistryValue "Ad_Count", advertisement_count, REG_SZ
    End With
    
    reg_unregSaveCount reg_count, False
    
    '' Stop advertisement protection
    stop_adv_host
    
    '' The alt_end is just there incase later on I have to
    '' unload the program without restoring the old hosts file
    If Not alt_end = 1 Then
        '' Close the file
        Close #1
        '' Open for writing
        Open windows_hosts_file For Output As #1
            '' Restore old hosts file
            Print #1, "# " & build_title & Chr(13) & Chr(10) & localhost & " localhost"
        '' Close it
        Close #1
    End If
    
    '' Remove icon from system tray
    trayclose frmMenu
    '' Stop owner drawn menus
    UnSubClass
    '' Unload forms
    Unload frmMenu
    Unload frmMain
    '' End
    End
    
End Sub

Public Function restore_hosts()
    
    '' Temporary variable
    Dim temp_data As String
    '' If we encounter an error, goto err_ender goto tag
    On Error GoTo err_ender
    '' Close files
    Close #1
    Close #2
    '' Open backup hosts file for reading
    Open backup_file For Input As #1
    '' Open windows hosts file for writing
    Open windows_hosts_file For Output As #2
        '' Loop until the end of file
        '' Reading from the backup hosts file
        '' And dumping it to the windows hosts file
        While Not EOF(1)
            Line Input #1, temp_data
            Print #2, temp_data
        Wend
    '' Close the files
    Close #1
    Close #2
    '' Clear the temp variable
    temp_data = ""
    '' Return without error
    restore_hosts = 0
    Exit Function
    
err_ender:
    '' Clear the temp variable and return an error
    temp_data = ""
    restore_hosts = 1
    
End Function

Public Function backup_hosts()

    '' Check to see if there is a valid hosts file
    '' If not, return an error
    If Not "hosts" = LCase(Dir(windows_hosts_file)) Then
        backup_hosts = 1
        Exit Function
    End If
    
    '' Temporary string
    Dim temp_data As String
    '' If an error, goto the err_ender tag
    On Error GoTo err_ender
    '' Close the files
    Close #1
    Close #2
    '' Open the windows hosts file for reading
    Open windows_hosts_file For Input As #1
    '' Open the backup file for writing
    Open backup_file For Output As #2
        '' Loop until the end of file while
        '' Reading from the windows hosts file
        '' and dumping it into the backup hosts file
        While Not EOF(1)
            Line Input #1, temp_data
            Print #2, temp_data
        Wend
    '' Close the files
    Close #1
    Close #2
    '' Clear the variable
    temp_data = ""
    '' Return without incident
    backup_hosts = 0
    Exit Function
    
err_ender:
    '' Clear the variable
    temp_data = ""
    '' Return with incident
    backup_hosts = 1
    
End Function

Public Function verify_Backupfile() As Boolean
        
    '' Check to see if we have a backup file created and return
    '' true or false
    If Not LCase(App.Path & "\" & Dir(backup_file)) = LCase(backup_file) Then
        verify_Backupfile = False
    Else
        verify_Backupfile = True
    End If
    
End Function
Public Function verify_Hostfile() As Boolean

    '' Check to see if we have already downloaded a hosts file
    '' and return true or false
    If Not LCase(App.Path & "\" & Dir(hosts_file)) = LCase(hosts_file) Then
        verify_Hostfile = False
    Else
        verify_Hostfile = True
    End If
    
End Function

Public Sub load_EditHosts()
    
    '' Verify we have a hosts file, if not notify the user and exit
    If Not verify_Hostfile() Then
        MsgBox "You need to update your hosts file first.", vbInformation, build_title
        Exit Sub
    End If
    
    
    With frmHosts
        '' Update the caption of the hosts dialog
        .Caption = build_title & " -- Loading hosts..."
        '' Show the dialog
        frmHosts.Show
        '' Clear the pound_data
        pound_data = ""
        '' Temporary variables
        Dim input_line As String
        Dim input_array() As String
        '' Ignore errors
        On Error Resume Next
        '' Close the file
        Close #1
        '' Open for reading
        Open hosts_file For Input As #1
            '' Loop until the end of file
            While Not EOF(1)
                '' Read a line in
                Line Input #1, input_line
                '' Parse the line, using a space as the delimiter
                input_array = Split(input_line, " ")
                '' Check the value, if it doesnt equal a false value, add it
                If Not input_array(0) = "#" And Not LCase(input_array(UBound(input_array))) = "localhost" Then
                    .lstHosts.ListItems.Add , , input_array(UBound(input_array))
                    '.lstHosts.ListItems(.lstHosts.ListItems.Count).ListSubItems.Add , , input_array(UBound(input_array))
                Else
                    '' If it does not equal a host, then add it to the pound data
                    If UBound(input_array) >= 2 And input_array(0) = "#" Then
                        pound_data = pound_data & "# " & input_array(1) & " " & input_array(2) & Chr(13) & Chr(10)
                    End If
                End If
            Wend
        Close #1
        '' Clear the variable
        input_line = ""
        '' Clear the array
        Erase input_array
        '' Update the caption with the correct count
        .Caption = build_title & " -- Hosts (" & .lstHosts.ListItems.Count & ")"
    End With
    
End Sub
